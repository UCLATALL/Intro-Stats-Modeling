<!DOCTYPE html>
<html>
<p>Welcome to Introduction to Statistics: A Modeling Approach. Statistics is the study of variation. It is the tools and concepts that have been developed, over centuries, to help us understand variation. There is a lot of variation in the world. As statisticians, we find ways to turn variation in the world into variation in data, and then analyze that data to deepen our understanding of the world.</p>
<p><img src="https://i.imgur.com/3FGrb7G.png" alt="Ch1_Globe" /></p>
<p>Learning statistics is hard. Even professional statisticians find it hard. They are always learning new things, deepening their understanding. In this course, we want to get you started along the pathway to understanding. At the end of the course you will understand more than you do now, and hopefully that will be useful to you. But this course could be only the beginning. You can take it as far as you want.</p>
<p>And one more thing: even though learning statistics is hard, anyone can do it! Seriously, we have not found anyone who can&rsquo;t understand the concepts in this course. If it feels hard, that just means you are making progress, not that you aren&rsquo;t capable of getting there. Don&rsquo;t forget this.</p>
<h2>The Forest and the Trees</h2>
<p>Most people have learned something about statistics before they take a course in it. Many of you have even taken whole courses in statistics before this one. If you have, you have probably heard about some or all of these things: mean, variance, standard deviation, t test, p, F, ANOVA, regression, chi-square, normal distribution, z score, and so on.</p>
<p>With such a long list, it&rsquo;s no surprise that many students see <em>remembering</em> as the most challenging part of learning statistics. But actually, remembering is not the most challenging part. Understanding is the most challenging part. Even if you remember what all these things are, if you don&rsquo;t understand how it all fits together you will probably forget it all as soon as you are done with the final exam. We don&rsquo;t want that to happen!</p>
<p>We will discuss lots of these things you have heard of, or studied, before. But instead of emphasizing their particularity - how each is different from the other - we will work on understanding their coherence - how they are all connected together into a system of thinking. In other words, our goal is to help you see the forest, not the trees. The trees will come later, and more easily, if you have an overall framework for understanding where everything fits.</p>
<p><img src="https://i.imgur.com/EMDQwc7.png" alt="Ch1_Musk" /></p>
<p>Elon Musk, the founder of Tesla and SpaceX, was asked on Reddit: &laquo;How do you learn so much so fast?&raquo; He answered like this:</p>
<p>One bit of advice: it is important to view knowledge as sort of a semantic tree &ndash; make sure you understand the fundamental principles, ie the trunk and big branches, before you get into the leaves/details or there is nothing for them to hang on to. [<a href="https://www.reddit.com/r/IAmA/comments/2rgsan/i_am_elon_musk_ceocto_of_a_rocket_company_ama/#bottom-comments">source</a>]</p>
<p>This is exactly what we are trying to give you: the trunk and big branches that you can hang other ideas on to. If you focus on the big ideas, it will help organize your knowledge and make it more flexible and powerful.</p>
<h2>What is Statistics?</h2>
<p>We have said that statistics is the study of variation. And we want to focus on the forest, not the trees. But what is the forest when it comes to statistics&ndash;or, using the Musk metaphor, what are the trunk and big branches?</p>
<p>We divide our course into three parts: exploring variation, modeling variation, and evaluating models. These are the three main goals statisticians have when analyzing data. Pretty much everything you need to know about statistics can be understood in relation to these three goals. Importantly, everything you learned about statistics before you took this course can also be understood in this framework.</p>
<p>The big idea that unites all of this together is the concept of <em>statistical model</em>. We don&rsquo;t assume that you know what a statistical model is. Instead, we expect your understanding of this powerful idea to increase gradually throughout the course. Statistical models help us in three main ways:</p>
<p>First, they help us to understand patterns in data and where they come from, or, what we will call the Data Generating Process (or DGP for short).</p>
<p>Second, they help us to predict what will happen in the future. Of course we can&rsquo;t really predict the future very well - we aren&rsquo;t psychic, and you probably aren&rsquo;t either. But, using statistical models, we can make better predictions than we could without them, even if they aren&rsquo;t very good. Sometimes this is very useful. When Netflix recommends a movie you might like, they use a statistical model. They may be wrong, but they do better than just random guessing!</p>
<p>Finally, statistical models can help you improve the functioning of complex systems. In situations where everything seems to vary, and where the variation seems overwhelming, you can still use statistical models to help you identify changes you can make in one variable that will improve some outcome you are interested in. Some hospitals, for example, use statistical models to help reduce the time patients spend waiting to see a doctor.</p>
<h2>Statistical Thinking: Simple + Profound</h2>
<p>Jordan Ellenberg in his book <em>How Not to Be Wrong</em> provides a nice description of where the content of his book will focus, which applies equally well to this course.</p>
<p style="text-align: center;">&gt;<img src="https://i.imgur.com/o59HK3R.png?1" alt="Ch1_Ellenberg" /></p>
<p>Math, he writes, can be organized along two dimensions (see figure). First, there is simple math and complicated math. 1+2=3 is simple math, whereas this is more complicated:</p>
<p style="text-align: center;"><img src="https://tex.s2cms.ru/svg/f(x)%20%26%20%3D%20%5Cint%20h(x)%5C%2C%20dx%7D%3Dg(x)" alt="f(x) &amp; = \int h(x)\, dx}=g(x)" align="center" /></p>
<p>The other dimension is from shallow to profound. Although the previous two examples differ in terms of how complicated they are, both are relatively shallow in their import.</p>
<p>Professional mathematicians spend their time working on ideas that are complicated and profound (upper right quadrant of the table). But mathematical ideas that are profound do not have to be complicated. Some ideas are simple, yet profound.</p>
<p>For example, the Pythagorean theorem, <img src="https://tex.s2cms.ru/svg/a%5E2%20%2B%20b%5E2%20%3D%20c%5E2" alt="a^2 + b^2 = c^2" />, is often taught in geometry courses to help students solve for one of the sides of a triangle. But there is a profoundness to the Pythagorean theorem that has nothing to do with solving for anything. If you take any right triangle, ANY right triangle, squares created from the two smaller sides will equal the area of the square created from the hypotenuse.</p>
<p><img src="https://i.imgur.com/hDwnByD.png" alt="Ch1_Pythagoras" /></p>
<p>Statistics, especially the statistics we will study in this course, falls in this quadrant - simple and profound. The ideas are actually pretty simple, especially when you look past the surface features to the big organizing concepts behind them. But they are powerful ideas that can make a profound difference in how you think about and analyze the world. This is our sweet spot.</p>
<p>The mathematics behind basic statistics is simple (it&rsquo;s mostly adding, subtracting, multiplying, and dividing a bunch of times). The computations are trivial, though labor intensive. That&rsquo;s why statisticians, more than anyone, are so excited about the advent of modern computers. It means they don&rsquo;t have to do repeated and boring calculations. In fact, if all you learn is how to calculate statistics, you really won&rsquo;t know much.</p>
<p>Statistics is not about calculation. It is about thinking. The hard part of this course will not be understanding all the pieces - the calculations, the symbols, and so on - but understanding how all these pieces fit together. In short, you need to understand. Let&rsquo;s pause to consider what it means to understand, and how you can get there.</p>
<h2>What is Understanding?</h2>
<p>Most of the math classes you have taken before focus on solving problems, not on understanding. Generally, in math courses you get introduced to a type of problem (e.g., a simple algebra problem), and then you are told the steps to solve the problem. If you are like most students, you memorize the steps, and use them to pass the exam! You might even have learned material in this way if you&rsquo;ve taken a statistics class. You might have been given some data with instructions to calculate a statistic following a prescribed set of steps, steps you had memorized (and have now forgotten).</p>
<p>Although this seems perfectly normal - it&rsquo;s the way most mathematics is taught, at least in the United States - it actually can prevent you from understanding mathematics. If you don&rsquo;t understand, you won&rsquo;t be able to generate the steps yourself, or apply them in new situations. As soon as you encounter a problem different from the ones in the book, you are in trouble!</p>
<p>Cognitive psychologists are beginning to understand a lot about what understanding is, and how to get it. Here are a few things worth noting because they will help you get your head in the right place to start this course.</p>
<p><strong>Understanding is a skill that can be practiced.</strong> Although we like to think that understanding is different from skills such as playing the piano, in many ways it is the same. Understanding, like many skills, is something that you can increase through practice. But, what you practice looks different from learning to play a musical instrument.</p>
<p>Understanding concepts such as the ones taught in this course requires you to practice thinking. What that usually means is practicing connections. For example you need to take an idea you learn about in this course and practice thinking about how it applies to new situations, and how it connects with other, related ideas. This is what you need to do to understand.</p>
<p><strong>Confusion is part of the learning process.</strong> Just like a musician starts out playing badly and gradually learns to play better, understanding works the same way. When you start trying to understand something that is hard to understand you will, initially, be confused. This doesn&rsquo;t mean you are stupid, it just means you don&rsquo;t understand yet.</p>
<p>Because confusion is part of learning, we should say something about how to get less confused - you don&rsquo;t want to just stay confused! The answer is: think hard, and don&rsquo;t give up. Instead of thinking, &laquo;I can&rsquo;t do this,&raquo; try just sticking with it, and be patient. Your understanding will grow.</p>
<p><strong>Understanding takes time.</strong> This first two ideas naturally imply a third idea: understanding takes time. The concepts that underlie statistics are not things you understand in an instant, but things that will continue to develop over weeks, months, and even years.</p>
<p>We all know that learning skills takes time. No one expects to become an expert tennis player all at once - it can take years of practice. But many people think that understanding is something that happens in an instant - Eureka! As it turns out, that&rsquo;s not true, at least for most things. So enjoy the process, be patient, don&rsquo;t hurry.</p>
<h2>Learning By Doing</h2>
<p>With all this talk about understanding, you may think this course is going to be just a big discussion of ideas. It&rsquo;s not. Because at the same time you are learning about the core concepts of statistics, you also will be learning how to analyze data.</p>
<p>The reason for understanding statistical concepts in the first place is to guide you as you learn to make sense out of variation in data. As you work through the course, therefore, you will be constantly putting your knowledge to use: organizing, analyzing, and interpreting data.</p>
<p>In some courses you read the book and listen to lectures, then take a test at the end. This course is different. In this course you will be asked to do things on every page: analyze data and answer questions. You may feel like you are constantly being &laquo;tested.&raquo;</p>
<p>While in a sense this is true, it&rsquo;s important for you to know that doing things is often the best way to learn things. So, answering a question is not just so your teacher can know how you are doing, but also is an important learning opportunity, a part of the learning design.</p>
<p>There will be a test at the end of the course, and maybe a few quizzes along the way, to see what you have learned. But the main reason for all the questions you will answer as you work through the course is just to help you learn more. Don&rsquo;t worry if you get questions wrong on the first try. Use the questions to help you figure things out. By working hard on them, thinking hard, it will help you get a higher grade on the final exam.</p>
<h2>Doing Statistics with R</h2>
<p>Speaking of doing, how are you going to do the data analysis part of this course? The answer is: you are going to use R (yes, it&rsquo;s just called R, the letter). R is a free open source coding language commonly used by statisticians. Open source means that R was developed and is maintained not by a company but by a community of users. So basically, anyone can contribute to R and help make it better.</p>
<p>Technology is a fundamental part of doing statistics these days. In fact, most of what we do in terms of data analysis would not be possible without computers, and most statistics courses include learning to use software for data analysis. There are many different software packages available. We chose to use R for two reasons: First, it&rsquo;s free. Second, it&rsquo;s a coding language.</p>
<p>You may be thinking: coding language; that sounds hard! It may, in fact, be a little harder than just learning to use a statistics package with a point-and-click interface. But we want you to learn some R because we believe writing code will help you understand statistics better than will clicking on buttons in a statistics package.</p>
<p>Representing the same concept in different forms (called &laquo;re-representation&raquo;) helps make learning more robust. In this course, you will use a number of different representations: words, graphs, tables, mathematical notation, and R. Making connections between these different representations will deepen your understanding.</p>
<p><strong>What is a coding language?</strong> You may already know a bit about computer coding (or programming). But if you don&rsquo;t, it&rsquo;s worth demystifying it a little. Computers manipulate data rapidly and accurately - something we need to do in statistics. A coding language is the language we use for telling a computer what to do. It&rsquo;s really that simple.</p>
<p>For example, here&rsquo;s a bit of R (what we sometimes refer to as &laquo;code.&raquo; Try pressing the Run button to see what it will do.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io/intro-stats-modeling/data-camp/chapter-1/ch1-1.html" width="100%" height="350"></iframe></p>
<p>Hey! Did you expect it to print out &laquo;Hello world!&raquo;? Well great! You just figured out a little bit of R.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io/intro-stats-modeling/data-camp/chapter-1/ch1-2.html" width="100%" height="350"></iframe></p>
<p>This bit of code gave you the sum of 1, 5, and 10 (that is, 16). You are already learning a bit of code.</p>
<p>The rectangular window that you just interacted with is called a DataCamp exercise. Datacamp exercises are constructed to help you learn R without having to install anything or do anything special to your computer. You can just focus on learning R.</p>
<p>In the DataCamp exercise, you&rsquo;ll see a few different windows. The part that has the code (i.e., the instructions for what the computer should do) is called the script window and there is a little script.R label on the top of it. The window where the code actually runs, and where the results appear, is called the R console.</p>
<p>You can also use R like a basic calculator. Try running this code to see the results in the R console.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-3" width="100%" height="350"></iframe></p>
<p>Notice that you can put more than one line of code - or set of instructions - in a single script window. When you press the Run button, all the commands in the window will be run, one after the other in the order in which they appear.</p>
<p><strong>DataCamp and R Studio.</strong> In this course we will run all of our R code in the DataCamp windows. DataCamp is a company that focuses on teaching people data science and coding online. If you get interested in learning more about R after this course, you can try some of <a href="http://www.datacamp.com">DataCamp&rsquo;s more advanced courses</a>.</p>
<p>DataCamp is great for learning R. But later, when you start doing actual data analysis projects, you will probably use a different software package called RStudio. RStudio is an application that lets you write and run R code on your computer. There is no need to download and install RStudio on your computer at this point. But if you want to do it later, as you get a better grasp of R, here is <a href="https://www.rstudio.com/online-learning/">a link to the RStudio page</a>. RStudio, by the way, is also a free resource.</p>
<p>Because R is open source, there are people always inventing new things to do with R so there is always more to learn.</p>
<h2>Introduction to R Functions</h2>
<p>So far you know how to print some words and do some basic arithmetic in R. One of the great things about R is that there are a lot of built in commands that you can use. These are called <em>functions</em>. Functions are written by the open source community. You have already seen two functions in action, <code>print( )</code> and <code>sum( )</code>.</p>
<p>Functions have two basic parts, the first part is the name of the function (e.g., sum). The second part is the input to the function, which goes inside the parentheses. Whenever we introduce a new function, we will bold it&rsquo;s name and put parentheses after it like we did with <code>sum( )</code> and <code>print( )</code>.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-4.html" width="100%" height="350"></iframe></p>
<p>Notice that the actual R code are the lines you wrote, such as sum(5,10,15) or print(&laquo;hello&raquo;). The other lines in the script window (the ones that starts with a # sign) are called comments. R will ignore comments, and just execute the code. In this course we will use the comments as a way to give you instructions for R exercises.</p>
<p><strong>R is picky; sorry about that!</strong> One thing to be aware of is that R is very, very picky. For example, if you type sum(1,100) it will tell you the answer, 101. But if you type Sum(1,100), capitalizing the &laquo;s,&raquo; it will act like it has no idea what you are talking about!</p>
<p>To take another example: in the <code>print( )</code> function, if we left off the quotation marks, typing <code>print(hello)</code> instead of <code>print("hello")</code>, R would return an error message. Let us show you what we mean.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-5.html" width="100%" height="350"></iframe></p>
<p>If a human treated you this way it would be infuriating! A human would figure out what you meant. But R (a computer program) is not able to do that. It assumes you mean exactly what you type.</p>
<p>Here&rsquo;s another example. Watch what happens if you forget to put in the close parenthesis in an R function.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-6.html" width="100%" height="350"></iframe></p>
<p>If you forget a parenthesis, R will just respond with a + sign, waiting for what comes next. And because R is just computer software, it will wait forever! Sometimes R will drive you crazy, sending you off looking for tiny little mistakes that are holding it up. Argh!</p>
<p>You&rsquo;ll learn a lot of functions as you progress through this course. It may be helpful to keep track of them in a notebook. We&rsquo;ll also provide an &laquo;R summary&raquo; with notes about different functions we introduce at the end of each chapter.</p>
<p>But even though you will learn a lot, there are literally thousands of functions in R, more than anyone could remember. And, there are often many functions that do similar things. Even advanced users of R can&rsquo;t remember it all.</p>
<p>What we do - and you can do it too - is just search on the internet for functions we can&rsquo;t remember. Not only will you find some new functions, but you&rsquo;ll also find endless discussions about which ones are better than others! Oh, what fun!</p>
<h2>R Functions and Packages</h2>
<p>You might be wondering, &laquo;Where do all these functions come from?&raquo; Many R functions are written by people in the R community - in other words, other people who use R. People share functions, and example data sets, with each other by releasing R packages which can be downloaded and installed, much like you install apps on your computer or phone.</p>
<p>R packages are available in an online respository called <a href="https://cran.r-project.org/">CRAN</a>, and there are thousands of packages on CRAN. We use several R packages in this course, some of them have been written specifically to help students learn and use R more easily. <a href="http://mosaic-web.org/r-packages/">Mosaic</a> is an example of a package written by educators. They thought about different functions that would be helpful to students and put them all together into a package.</p>
<p>For this course, you really don&rsquo;t need to worry about all this. We will pre-install in DataCamp all the packages we expect you to use so you don&rsquo;t need to install them. But it&rsquo;s important for you to understand where packages come from, because if you decide to install RStudio on your own computer, you may find some of the functions you were taught to use in the course don&rsquo;t work! The reason is simply that the packages haven&rsquo;t been installed.</p>
<p>Installing packages from within RStudio is easy. We will provide you with a list of packages that we use in this course so you can install them yourself should you decide to run your own copy on RStudio.</p>
<p><code>rflip( )</code>. Speaking of the mosaic package, here&rsquo;s a fun little function written by the educators behind mosaic. Knowing that statistics instructors often ask their students to consider probabilities from flipping coins, they wrote a function called <code>rflip( )</code> that makes it easy to simulate a coin flip in R.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-7.html" width="100%" height="350"></iframe></p>
<p>If you are only going to flip one coin one time you could just as easily use a real coin. But if you want to flip a coin many times and save all the results, it makes sense to let the computer do it for you. You can input any number of coin flips into <code>rflip( )</code>. So <code>rflip(3)</code> would give you the results of three simulated coin flips.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-8.html" width="100%" height="350"></iframe></p>
<h2>Trial and Error, and the Culture of Programming</h2>
<p>Earlier we talked about the culture of math. Many students expect the teacher to teach them the right steps to follow for solving problems, and assume that their job is to remember the steps. We made the point that this isn&rsquo;t a very useful way of thinking about math. It&rsquo;s also not going to help you learn programming.</p>
<p>The best way to learn programming is to try things and see what happens. Write some code, run it, and think about why it didn&rsquo;t work! (Sorry to be negative, but often things don&rsquo;t work the first time.) There are so many ways to make tiny mistakes in programming (e.g., writing an uppercase letter when you need a lowercase letter). We often have to find these bugs by trial and error.</p>
<p>Trial and error can be frustrating if we are not used to learning this way, and it may seem inefficient. But trial and error is a great way to learn because we learn from wrong answers as well as right ones. We might sometimes, in this course, ask you to run code that is wrong just to see what happens.</p>
<p>By embracing the process of trial and error you will be learning about a whole new way of thinking, about the culture of programming. It will not always go in a straight line, getting better and better, but will be more like experimenting and exploring, making discoveries as you go. The benefit of exploring is that you will get a more thorough sense of R and statistics!</p>
<h2>R Objects</h2>
<p>Have you ever had an experience where you have forgotten to save your work? It&rsquo;s a terrible feeling. Saving your work is also important in R. In R, we don&rsquo;t just do calculations and look at the results on the R console. We usually save the results of the calculations somewhere we can find them later.</p>
<p>Pretty much anything, including the results of any R function, can be saved in an R object. This is accomplished by using an assignment operator, which looks kind of like an arrow (&lt;-). You can make up any name you want for an R object. Any combination of upper case letters, lower case letters, numbers, or even a period or underscore can be used in the names of R objects.</p>
<p>Here&rsquo;s a simple example to show how it&rsquo;s done. Let&rsquo;s make up a name for an R object; we will call it <strong>myfavoritenumber</strong>. Then let&rsquo;s think of what our favorite number is (say, 20), and save it in the R object. Go ahead and run the code below to see how this works.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-9.html" width="100%" height="350"></iframe></p>
<p>Now remember, R is case sensitive. Try assigning 5 to num and 10 to NUM.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-10.html" width="100%" height="350"></iframe></p>
<p><strong>Vectors</strong>. We&rsquo;ve used R objects so far to store a single number. But in statistics we are dealing with variation, which by definition means more than one, and sometimes many, numbers. An R object can also store a whole set of numbers, called a vector. You can think of a vector as a list of numbers (or values).</p>
<p>The R function <code>c( )</code> can be used to combine a list of individual values into a vector. You could think of the &laquo;c&raquo; as standing for &ldquo;combine.&rdquo;</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-11.html" width="100%" height="350"></iframe></p>
<p>If you ask R to perform an operation on a vector, it will assume that you want to work with the whole vector not just one of the numbers.</p>
<p>So if you want to multiply each number in my.vector by 100, then you can just write my.vector * 100. Try it in the Data Camp window below.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-12.html" width="100%" height="350"></iframe></p>
<p>Notice that when you do a calculation with a vector, you&rsquo;ll get a vector of numbers as the answer, not just a single number.</p>
<p>After you multiply my.vector by 100, what will happen if you print out my.vector? Will you get the original vector (1,2,3,4,5) or one that has the hundreds (100,200,300,400,500)? Try running this code to see what happens.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-13.html" width="100%" height="350"></iframe></p>
<p>Remember, R will do the calculations but if you want something saved, you have to assign it somewhere. Try writing some code to compute my.vector * 100 and then save the result back into my.vector.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-14.html" width="100%" height="350"></iframe></p>
<p>There may be times when you just want to know one of the values in a vector, not all of values. We can index a position in the vector by using brackets with a number in it like this: <code>[1]</code>. So if we wanted to print out the contents of the first position in my.vector, we could write <code>my.vector[1]</code>.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-15.html" width="100%" height="350"></iframe></p>
<p>Many functions will take in a vector as the input. For example, try using <code>sum( )</code> to total up the five values saved in my.vector.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-16.html" width="100%" height="350"></iframe></p>
<p>We will learn about other R objects that help us organize and visualize data as we go along in the class.</p>
<h2>What You Can Store in an R Object</h2>
<p>You can think of R objects like buckets that hold values. An R object can be a single bucket or a chain of buckets (in the case of a vector). So far, we have only put numbers into R objects. But R objects can actually hold three types of values: numbers, characters, and Boolean values.</p>
<p><strong>Numerical values.</strong> If R knows that you are using numbers, it can do lots of things with them. We have seen, for example, that R can perform arithmetic operations on numbers - addition, subtraction, multiplication, and division.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-17" width="100%" height="350"></iframe></p>
<p>Note that in R when we say 1:10 it means 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. That&rsquo;s pretty convenient. Imagine if you needed a vector with the numbers from 1 to 10,000! This would be a big time saver.</p>
<p><strong>Character values</strong>. Characters are comprised of text, such as words or sentences. (Numbers can also be treated as characters, depending on the context. For example, the number &laquo;20&raquo; is a character value, even though it includes a number.) Character values are in between quotation marks, &ldquo; &rdquo; (R doesn&rsquo;t usually care whether you use single quotes, &lsquo;like this&rsquo;, or double quotes, &ldquo;like that&rdquo;). We&rsquo;ll mostly use double quotes for consistency.</p>
<p>If we forget the quotes, R will think that the word is a name of an object instead of a character value.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-18" width="100%" height="350"></iframe></p>
<p><strong>Boolean values</strong>. Boolean values are either TRUE or FALSE. Maybe we have a question such as: Is the first element in the vector <strong>many.hellos</strong> &laquo;hi&raquo;? We can ask R to find out and return the answer TRUE or FALSE. We can do that by using the comparison operator == (it just means &lsquo;equal&rsquo;).</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-19" width="100%" height="350"></iframe></p>
<p>If we want, we can store that answer in an R object.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io/intro-stats-modeling/data-camp/chapter-1/ch1-20" width="100%" height="350"></iframe></p>
<p>Most of the questions we ask R to answer with a TRUE or FALSE involve comparison operators such as &gt;, &lt;, &gt;=, &lt;=, and ==. The double == sign checks if two values are equal. There is even a comparison operator to check whether values are <em>not</em> equal: !=. For example, 5 != 3 is a TRUE statement.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-21" width="100%" height="350"></iframe></p>
<p>Note that Compare in the code above is not a function. You know this because there is no ( ) after it. Compare, in this case, is just a name we made up for an R object to store the Boolean result of the question, &laquo;Is A greater than B?&raquo;. The answer, as we can see, is FALSE.</p>
<p>We can also create Boolean vectors by subjecting a whole vector to a comparison. Let&rsquo;s create a numeric vector with the numbers from 1 to 10 (we will call this vector <strong>my.numbers</strong>). Then let&rsquo;s create a Boolean vector called <strong>my.booleans</strong> to store the results of checking whether each number in the my.numbers vector is greater than or equal to 5.</p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-22.html" width="100%" height="350"></iframe></p>
<p><iframe style="border: 0px #ffffff none;" src="https://uclatall.github.io//intro-stats-modeling/data-camp/chapter-1/ch1-23" width="100%" height="350"></iframe></p>
<p>In R, we will avoid using the single equal sign, =. If you want to know whether A is equal to B, use the double equal sign, ==. The single equal sign is sometimes used instead of the assignment operator, &lt;-, which can get confusing, both to you and to R. Use the arrow (&lt;-) to assign values to an R object, and == to ask whether two values are equal.</p>
<h2>R for Humans</h2>
<p>Programming languages are primarily for communicating with computers. But there are a lot of things we do when we write R to communicate with humans. For example, R doesn&rsquo;t care if we write spaces between things. We will write <code>A &lt;- 5</code> and we put spaces in there. But we don&rsquo;t do it for R. R thinks that <code>A&lt;-5</code> is the same as <code>A &lt;- 5</code>. But it&rsquo;s easier for a human to see what the parts are if we put some spaces. The same goes for comments (that begin with #); R will ignore that code but it may be useful for a human reading the code.</p>
<p>Also, we are mindful that R is a computer language and doesn&rsquo;t actually &laquo;think&raquo; or &ldquo;care&rdquo; or &ldquo;ignore&rdquo; anything, but we will commonly anthropomorphize R. Many readers of this book are new to programming and it might be helpful to think about programming as communicating with R.</p>
<h2>Goals of This Course</h2>
<p>Well, we didn&rsquo;t even let you get through the introduction without doing some actual R coding! Doing and thinking - these are the main things you should be filling your time with as you go through this course. Doing without thinking would reduce you to just rote memorization of procedures. Thinking without doing would be awfully boring - you would miss the exciting part!</p>
<p>Our goals for this course are as follows:</p>
<p>First, to learn how to analyze data, using R. We want you to end up well on your way to being a data master.</p>
<p>Second, to understand the core concepts of the domain - the ideas that will help you make sense of the analyses you produce.</p>
<p>Third, to prepare you to learn more about statistics in the future. Statistics is a big field. Knowing a little is still useful, but you should feel ready to keep learning after you finish this course.</p>
<p>So, let&rsquo;s get started!</p>
<p>[Learnosity] End of chapter questions</p>
</html>
